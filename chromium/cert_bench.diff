diff --git a/base/logging.h b/base/logging.h
index d967ecb3a9..c7716a2c39 100644
--- a/base/logging.h
+++ b/base/logging.h
@@ -398,8 +398,8 @@ const LogSeverity LOG_0 = LOG_ERROR;
 // As special cases, we can assume that LOG_IS_ON(FATAL) always holds. Also,
 // LOG_IS_ON(DFATAL) always holds in debug mode. In particular, CHECK()s will
 // always fire if they fail.
-#define LOG_IS_ON(severity) \
-  (::logging::ShouldCreateLogMessage(::logging::LOG_##severity))
+#define LOG_IS_ON(severity) false
+  // (::logging::ShouldCreateLogMessage(::logging::LOG_##severity))
 
 // We don't do any caching tricks with VLOG_IS_ON() like the
 // google-glog version since it increases binary size.  This means
diff --git a/net/BUILD.gn b/net/BUILD.gn
index cba943e73f..2293551141 100644
--- a/net/BUILD.gn
+++ b/net/BUILD.gn
@@ -5594,3 +5594,19 @@ if (is_linux || is_chromeos) {
     ]
   }
 }
+
+executable("cert_bench") {
+  testonly = true
+  sources = [
+    "tools/cert_bench/cert_bench.cc",
+  ]
+
+  deps = [
+    ":net",
+    "//base",
+  ]
+
+  if (is_mac) {
+    frameworks = [ "Security.framework" ]
+  }
+}
diff --git a/net/cert/cert_verify_proc.cc b/net/cert/cert_verify_proc.cc
index 6135c24fe8..9b358fe566 100644
--- a/net/cert/cert_verify_proc.cc
+++ b/net/cert/cert_verify_proc.cc
@@ -255,26 +255,26 @@ void BestEffortCheckOCSP(const std::string& raw_response,
 // is assumed to have been validated chaining to a private root,
 // contains the TLS Feature Extension (https://tools.ietf.org/html/rfc7633) and
 // has valid OCSP information stapled.
-void RecordTLSFeatureExtensionWithPrivateRoot(
-    X509Certificate* cert,
-    const OCSPVerifyResult& ocsp_result) {
-  // This checks only for the presence of the TLS Feature Extension, but
-  // does not check the feature list, and in particular does not verify that
-  // its value is 'status_request' or 'status_request2'. In practice the
-  // only use of the TLS feature extension is for OCSP stapling, so
-  // don't bother to check the value.
-  bool has_extension = asn1::HasTLSFeatureExtension(
-      x509_util::CryptoBufferAsStringPiece(cert->cert_buffer()));
-
-  UMA_HISTOGRAM_BOOLEAN("Net.Certificate.TLSFeatureExtensionWithPrivateRoot",
-                        has_extension);
-  if (!has_extension)
-    return;
-
-  UMA_HISTOGRAM_BOOLEAN(
-      "Net.Certificate.TLSFeatureExtensionWithPrivateRootHasOCSP",
-      (ocsp_result.response_status != OCSPVerifyResult::MISSING));
-}
+// void RecordTLSFeatureExtensionWithPrivateRoot(
+//     X509Certificate* cert,
+//     const OCSPVerifyResult& ocsp_result) {
+//   // This checks only for the presence of the TLS Feature Extension, but
+//   // does not check the feature list, and in particular does not verify that
+//   // its value is 'status_request' or 'status_request2'. In practice the
+//   // only use of the TLS feature extension is for OCSP stapling, so
+//   // don't bother to check the value.
+//   bool has_extension = asn1::HasTLSFeatureExtension(
+//       x509_util::CryptoBufferAsStringPiece(cert->cert_buffer()));
+
+//   UMA_HISTOGRAM_BOOLEAN("Net.Certificate.TLSFeatureExtensionWithPrivateRoot",
+//                         has_extension);
+//   if (!has_extension)
+//     return;
+
+//   UMA_HISTOGRAM_BOOLEAN(
+//       "Net.Certificate.TLSFeatureExtensionWithPrivateRootHasOCSP",
+//       (ocsp_result.response_status != OCSPVerifyResult::MISSING));
+// }
 
 // Records details about the most-specific trust anchor in |hashes|, which is
 // expected to be ordered with the leaf cert first and the root cert last.
@@ -294,24 +294,24 @@ void RecordTLSFeatureExtensionWithPrivateRoot(
 // |spki_hashes| - that is, situations in which the OS methods of detecting
 // a known root flag a certificate as known, but its hash is not known as part
 // of the built-in list.
-void RecordTrustAnchorHistogram(const HashValueVector& spki_hashes,
-                                bool is_issued_by_known_root) {
-  int32_t id = 0;
-  for (const auto& hash : spki_hashes) {
-    id = GetNetTrustAnchorHistogramIdForSPKI(hash);
-    if (id != 0)
-      break;
-  }
-  base::UmaHistogramSparse("Net.Certificate.TrustAnchor.Verify", id);
-
-  // Record when a known trust anchor is not found within the chain, but the
-  // certificate is flagged as being from a known root (meaning a fallback to
-  // OS-based methods of determination).
-  if (id == 0) {
-    UMA_HISTOGRAM_BOOLEAN("Net.Certificate.TrustAnchor.VerifyOutOfDate",
-                          is_issued_by_known_root);
-  }
-}
+// void RecordTrustAnchorHistogram(const HashValueVector& spki_hashes,
+//                                 bool is_issued_by_known_root) {
+//   int32_t id = 0;
+//   for (const auto& hash : spki_hashes) {
+//     id = GetNetTrustAnchorHistogramIdForSPKI(hash);
+//     if (id != 0)
+//       break;
+//   }
+//   base::UmaHistogramSparse("Net.Certificate.TrustAnchor.Verify", id);
+
+//   // Record when a known trust anchor is not found within the chain, but the
+//   // certificate is flagged as being from a known root (meaning a fallback to
+//   // OS-based methods of determination).
+//   if (id == 0) {
+//     UMA_HISTOGRAM_BOOLEAN("Net.Certificate.TrustAnchor.VerifyOutOfDate",
+//                           is_issued_by_known_root);
+//   }
+// }
 
 bool AreSHA1IntermediatesAllowed() {
 #if defined(OS_WIN)
@@ -453,43 +453,43 @@ WARN_UNUSED_RESULT bool InspectSignatureAlgorithmsInChain(
   return true;
 }
 
-base::Value CertVerifyParams(X509Certificate* cert,
-                             const std::string& hostname,
-                             const std::string& ocsp_response,
-                             const std::string& sct_list,
-                             int flags,
-                             CRLSet* crl_set,
-                             const CertificateList& additional_trust_anchors) {
-  base::Value dict(base::Value::Type::DICTIONARY);
-  dict.SetKey("certificates", NetLogX509CertificateList(cert));
-  if (!ocsp_response.empty()) {
-    dict.SetStringKey("ocsp_response",
-                      PEMEncode(ocsp_response, "NETLOG OCSP RESPONSE"));
-  }
-  if (!sct_list.empty()) {
-    dict.SetStringKey("sct_list", PEMEncode(sct_list, "NETLOG SCT LIST"));
-  }
-  dict.SetKey("host", NetLogStringValue(hostname));
-  dict.SetIntKey("verify_flags", flags);
-  dict.SetKey("crlset_sequence", NetLogNumberValue(crl_set->sequence()));
-  if (crl_set->IsExpired())
-    dict.SetBoolKey("crlset_is_expired", true);
-
-  if (!additional_trust_anchors.empty()) {
-    base::Value certs(base::Value::Type::LIST);
-    for (auto& cert : additional_trust_anchors) {
-      std::string pem_encoded;
-      if (X509Certificate::GetPEMEncodedFromDER(
-              x509_util::CryptoBufferAsStringPiece(cert->cert_buffer()),
-              &pem_encoded)) {
-        certs.Append(std::move(pem_encoded));
-      }
-    }
-    dict.SetKey("additional_trust_anchors", std::move(certs));
-  }
-
-  return dict;
-}
+// base::Value CertVerifyParams(X509Certificate* cert,
+//                              const std::string& hostname,
+//                              const std::string& ocsp_response,
+//                              const std::string& sct_list,
+//                              int flags,
+//                              CRLSet* crl_set,
+//                              const CertificateList& additional_trust_anchors) {
+//   base::Value dict(base::Value::Type::DICTIONARY);
+//   dict.SetKey("certificates", NetLogX509CertificateList(cert));
+//   if (!ocsp_response.empty()) {
+//     dict.SetStringKey("ocsp_response",
+//                       PEMEncode(ocsp_response, "NETLOG OCSP RESPONSE"));
+//   }
+//   if (!sct_list.empty()) {
+//     dict.SetStringKey("sct_list", PEMEncode(sct_list, "NETLOG SCT LIST"));
+//   }
+//   dict.SetKey("host", NetLogStringValue(hostname));
+//   dict.SetIntKey("verify_flags", flags);
+//   dict.SetKey("crlset_sequence", NetLogNumberValue(crl_set->sequence()));
+//   if (crl_set->IsExpired())
+//     dict.SetBoolKey("crlset_is_expired", true);
+
+//   if (!additional_trust_anchors.empty()) {
+//     base::Value certs(base::Value::Type::LIST);
+//     for (auto& cert : additional_trust_anchors) {
+//       std::string pem_encoded;
+//       if (X509Certificate::GetPEMEncodedFromDER(
+//               x509_util::CryptoBufferAsStringPiece(cert->cert_buffer()),
+//               &pem_encoded)) {
+//         certs.Append(std::move(pem_encoded));
+//       }
+//     }
+//     dict.SetKey("additional_trust_anchors", std::move(certs));
+//   }
+
+//   return dict;
+// }
 
 }  // namespace
 
@@ -534,10 +534,10 @@ int CertVerifyProc::Verify(X509Certificate* cert,
                            const CertificateList& additional_trust_anchors,
                            CertVerifyResult* verify_result,
                            const NetLogWithSource& net_log) {
-  net_log.BeginEvent(NetLogEventType::CERT_VERIFY_PROC, [&] {
-    return CertVerifyParams(cert, hostname, ocsp_response, sct_list, flags,
-                            crl_set, additional_trust_anchors);
-  });
+  // net_log.BeginEvent(NetLogEventType::CERT_VERIFY_PROC, [&] {
+  //   return CertVerifyParams(cert, hostname, ocsp_response, sct_list, flags,
+  //                           crl_set, additional_trust_anchors);
+  // });
   // CertVerifyProc's contract allows ::VerifyInternal() to wait on File I/O
   // (such as the Windows registry or smart cards on all platforms) or may re-
   // enter this code via extension hooks (such as smart card UI). To ensure
@@ -683,19 +683,19 @@ int CertVerifyProc::Verify(X509Certificate* cert,
       rv = MapCertStatusToNetError(verify_result->cert_status);
   }
 
-  // Record a histogram for the presence of the TLS feature extension in
-  // a certificate chaining to a private root.
-  if (rv == OK && !verify_result->is_issued_by_known_root)
-    RecordTLSFeatureExtensionWithPrivateRoot(cert, verify_result->ocsp_result);
+  // // Record a histogram for the presence of the TLS feature extension in
+  // // a certificate chaining to a private root.
+  // if (rv == OK && !verify_result->is_issued_by_known_root)
+  //   RecordTLSFeatureExtensionWithPrivateRoot(cert, verify_result->ocsp_result);
 
-  // Record a histogram for per-verification usage of root certs.
-  if (rv == OK) {
-    RecordTrustAnchorHistogram(verify_result->public_key_hashes,
-                               verify_result->is_issued_by_known_root);
-  }
+  // // Record a histogram for per-verification usage of root certs.
+  // if (rv == OK) {
+  //   RecordTrustAnchorHistogram(verify_result->public_key_hashes,
+  //                              verify_result->is_issued_by_known_root);
+  // }
 
-  net_log.EndEvent(NetLogEventType::CERT_VERIFY_PROC,
-                   [&] { return verify_result->NetLogParams(rv); });
+  // net_log.EndEvent(NetLogEventType::CERT_VERIFY_PROC,
+  //                  [&] { return verify_result->NetLogParams(rv); });
   return rv;
 }
 
diff --git a/net/cert/cert_verify_proc_builtin.cc b/net/cert/cert_verify_proc_builtin.cc
index 34c9987a29..b6c184b11c 100644
--- a/net/cert/cert_verify_proc_builtin.cc
+++ b/net/cert/cert_verify_proc_builtin.cc
@@ -52,61 +52,61 @@ DEFINE_CERT_ERROR_ID(kPathLacksEVPolicy, "Path does not have an EV policy");
 
 const void* kResultDebugDataKey = &kResultDebugDataKey;
 
-base::Value NetLogCertParams(const CRYPTO_BUFFER* cert_handle,
-                             const CertErrors& errors) {
-  base::Value results(base::Value::Type::DICTIONARY);
-
-  std::string pem_encoded;
-  if (X509Certificate::GetPEMEncodedFromDER(
-          x509_util::CryptoBufferAsStringPiece(cert_handle), &pem_encoded)) {
-    results.SetStringKey("certificate", pem_encoded);
-  }
-
-  std::string errors_string = errors.ToDebugString();
-  if (!errors_string.empty())
-    results.SetStringKey("errors", errors_string);
-
-  return results;
-}
-
-base::Value PEMCertListValue(const ParsedCertificateList& certs) {
-  base::Value value(base::Value::Type::LIST);
-  for (const auto& cert : certs) {
-    std::string pem;
-    X509Certificate::GetPEMEncodedFromDER(cert->der_cert().AsStringPiece(),
-                                          &pem);
-    value.Append(std::move(pem));
-  }
-  return value;
-}
-
-base::Value NetLogPathBuilderResultPath(
-    const CertPathBuilderResultPath& result_path) {
-  base::Value value(base::Value::Type::DICTIONARY);
-  value.SetBoolKey("is_valid", result_path.IsValid());
-  value.SetIntKey("last_cert_trust",
-                  static_cast<int>(result_path.last_cert_trust.type));
-  value.SetKey("certificates", PEMCertListValue(result_path.certs));
-  // TODO(crbug.com/634484): netlog user_constrained_policy_set.
-  std::string errors_string =
-      result_path.errors.ToDebugString(result_path.certs);
-  if (!errors_string.empty())
-    value.SetStringKey("errors", errors_string);
-  return value;
-}
-
-base::Value NetLogPathBuilderResult(const CertPathBuilder::Result& result) {
-  base::Value value(base::Value::Type::DICTIONARY);
-  // TODO(crbug.com/634484): include debug data (or just have things netlog it
-  // directly).
-  value.SetBoolKey("has_valid_path", result.HasValidPath());
-  value.SetIntKey("best_result_index", result.best_result_index);
-  if (result.exceeded_iteration_limit)
-    value.SetBoolKey("exceeded_iteration_limit", true);
-  if (result.exceeded_deadline)
-    value.SetBoolKey("exceeded_deadline", true);
-  return value;
-}
+// base::Value NetLogCertParams(const CRYPTO_BUFFER* cert_handle,
+//                              const CertErrors& errors) {
+//   base::Value results(base::Value::Type::DICTIONARY);
+
+//   std::string pem_encoded;
+//   if (X509Certificate::GetPEMEncodedFromDER(
+//           x509_util::CryptoBufferAsStringPiece(cert_handle), &pem_encoded)) {
+//     results.SetStringKey("certificate", pem_encoded);
+//   }
+
+//   std::string errors_string = errors.ToDebugString();
+//   if (!errors_string.empty())
+//     results.SetStringKey("errors", errors_string);
+
+//   return results;
+// }
+
+// base::Value PEMCertListValue(const ParsedCertificateList& certs) {
+//   base::Value value(base::Value::Type::LIST);
+//   for (const auto& cert : certs) {
+//     std::string pem;
+//     X509Certificate::GetPEMEncodedFromDER(cert->der_cert().AsStringPiece(),
+//                                           &pem);
+//     value.Append(std::move(pem));
+//   }
+//   return value;
+// }
+
+// base::Value NetLogPathBuilderResultPath(
+//     const CertPathBuilderResultPath& result_path) {
+//   base::Value value(base::Value::Type::DICTIONARY);
+//   value.SetBoolKey("is_valid", result_path.IsValid());
+//   value.SetIntKey("last_cert_trust",
+//                   static_cast<int>(result_path.last_cert_trust.type));
+//   value.SetKey("certificates", PEMCertListValue(result_path.certs));
+//   // TODO(crbug.com/634484): netlog user_constrained_policy_set.
+//   std::string errors_string =
+//       result_path.errors.ToDebugString(result_path.certs);
+//   if (!errors_string.empty())
+//     value.SetStringKey("errors", errors_string);
+//   return value;
+// }
+
+// base::Value NetLogPathBuilderResult(const CertPathBuilder::Result& result) {
+//   base::Value value(base::Value::Type::DICTIONARY);
+//   // TODO(crbug.com/634484): include debug data (or just have things netlog it
+//   // directly).
+//   value.SetBoolKey("has_valid_path", result.HasValidPath());
+//   value.SetIntKey("best_result_index", result.best_result_index);
+//   if (result.exceeded_iteration_limit)
+//     value.SetBoolKey("exceeded_iteration_limit", true);
+//   if (result.exceeded_deadline)
+//     value.SetBoolKey("exceeded_deadline", true);
+//   return value;
+// }
 
 RevocationPolicy NoRevocationChecking() {
   RevocationPolicy policy;
@@ -136,12 +136,12 @@ void GetEVPolicyOids(const EVRootCAMetadata* ev_metadata,
 // Returns true if |cert| could be an EV certificate, based on its policies
 // extension. A return of false means it definitely is not an EV certificate,
 // whereas a return of true means it could be EV.
-bool IsEVCandidate(const EVRootCAMetadata* ev_metadata,
-                   const ParsedCertificate* cert) {
-  std::set<der::Input> oids;
-  GetEVPolicyOids(ev_metadata, cert, &oids);
-  return !oids.empty();
-}
+// bool IsEVCandidate(const EVRootCAMetadata* ev_metadata,
+//                    const ParsedCertificate* cert) {
+//   std::set<der::Input> oids;
+//   GetEVPolicyOids(ev_metadata, cert, &oids);
+//   return !oids.empty();
+// }
 
 // Enum for whether path building is attempting to verify a certificate as EV or
 // as DV.
@@ -389,7 +389,7 @@ scoped_refptr<ParsedCertificate> ParseCertificateFromBuffer(
                                    errors);
 }
 
-void AddIntermediatesToIssuerSource(X509Certificate* x509_cert,
+bool AddIntermediatesToIssuerSource(X509Certificate* x509_cert,
                                     CertIssuerSourceStatic* intermediates,
                                     const NetLogWithSource& net_log) {
   for (const auto& intermediate : x509_cert->intermediate_buffers()) {
@@ -398,12 +398,17 @@ void AddIntermediatesToIssuerSource(X509Certificate* x509_cert,
         ParseCertificateFromBuffer(intermediate.get(), &errors);
     // TODO(crbug.com/634484): this duplicates the logging of the input chain
     // maybe should only log if there is a parse error/warning?
-    net_log.AddEvent(NetLogEventType::CERT_VERIFY_PROC_INPUT_CERT, [&] {
-      return NetLogCertParams(intermediate.get(), errors);
-    });
-    if (cert)
+    // net_log.AddEvent(NetLogEventType::CERT_VERIFY_PROC_INPUT_CERT, [&] {
+    //   return NetLogCertParams(intermediate.get(), errors);
+    // });
+    if (cert) {
       intermediates->AddCert(std::move(cert));
+    } else {
+      return false;
+    }
   }
+
+  return true;
 }
 
 // Appends the SHA256 hashes of |spki_bytes| to |*hashes|.
@@ -694,9 +699,9 @@ int CertVerifyProcBuiltin::VerifyInternal(
         ParseCertificateFromBuffer(input_cert->cert_buffer(), &parsing_errors);
     // TODO(crbug.com/634484): this duplicates the logging of the input chain
     // maybe should only log if there is a parse error/warning?
-    net_log.AddEvent(NetLogEventType::CERT_VERIFY_PROC_TARGET_CERT, [&] {
-      return NetLogCertParams(input_cert->cert_buffer(), parsing_errors);
-    });
+    // net_log.AddEvent(NetLogEventType::CERT_VERIFY_PROC_TARGET_CERT, [&] {
+    //   return NetLogCertParams(input_cert->cert_buffer(), parsing_errors);
+    // });
     if (!target) {
       verify_result->cert_status |= CERT_STATUS_INVALID;
       return ERR_CERT_INVALID;
@@ -705,7 +710,8 @@ int CertVerifyProcBuiltin::VerifyInternal(
 
   // Parse the provided intermediates.
   CertIssuerSourceStatic intermediates;
-  AddIntermediatesToIssuerSource(input_cert, &intermediates, net_log);
+  if (!AddIntermediatesToIssuerSource(input_cert, &intermediates, net_log))
+    return ERR_CERT_INVALID;
 
   // Parse the additional trust anchors and setup trust store.
   std::unique_ptr<SystemTrustStore> ssl_trust_store =
@@ -720,10 +726,10 @@ int CertVerifyProcBuiltin::VerifyInternal(
     // TODO(crbug.com/634484): this duplicates the logging of the
     // additional_trust_anchors maybe should only log if there is a parse
     // error/warning?
-    net_log.AddEvent(
-        NetLogEventType::CERT_VERIFY_PROC_ADDITIONAL_TRUST_ANCHOR, [&] {
-          return NetLogCertParams(x509_cert->cert_buffer(), parsing_errors);
-        });
+    // net_log.AddEvent(
+    //     NetLogEventType::CERT_VERIFY_PROC_ADDITIONAL_TRUST_ANCHOR, [&] {
+    //       return NetLogCertParams(x509_cert->cert_buffer(), parsing_errors);
+    //     });
   }
 
   // Get the global dependencies.
@@ -743,8 +749,8 @@ int CertVerifyProcBuiltin::VerifyInternal(
 
   // First try EV validation. Can skip this if the leaf certificate has no
   // chance of verifying as EV (lacks an EV policy).
-  if (IsEVCandidate(ev_metadata, target.get()))
-    attempts.emplace_back(VerificationType::kEV);
+  // if (IsEVCandidate(ev_metadata, target.get()))
+  //   attempts.emplace_back(VerificationType::kEV);
 
   // Next try DV validation.
   attempts.emplace_back(VerificationType::kDV);
@@ -758,15 +764,15 @@ int CertVerifyProcBuiltin::VerifyInternal(
        ++cur_attempt_index) {
     const auto& cur_attempt = attempts[cur_attempt_index];
     verification_type = cur_attempt.verification_type;
-    net_log.BeginEvent(
-        NetLogEventType::CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT, [&] {
-          base::DictionaryValue results;
-          if (verification_type == VerificationType::kEV)
-            results.SetBoolKey("is_ev_attempt", true);
-          results.SetIntKey("digest_policy",
-                            static_cast<int>(cur_attempt.digest_policy));
-          return results;
-        });
+    // net_log.BeginEvent(
+    //     NetLogEventType::CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT, [&] {
+    //       base::DictionaryValue results;
+    //       if (verification_type == VerificationType::kEV)
+    //         results.SetBoolKey("is_ev_attempt", true);
+    //       results.SetIntKey("digest_policy",
+    //                         static_cast<int>(cur_attempt.digest_policy));
+    //       return results;
+    //     });
 
     // If a previous attempt used up most/all of the deadline, extend the
     // deadline a little bit to give this verification attempt a chance at
@@ -783,13 +789,13 @@ int CertVerifyProcBuiltin::VerifyInternal(
 
     // TODO(crbug.com/634484): Log these in path_builder.cc so they include
     // correct timing information.
-    for (const auto& path : result.paths) {
-      net_log.AddEvent(NetLogEventType::CERT_VERIFY_PROC_PATH_BUILT,
-                       [&] { return NetLogPathBuilderResultPath(*path); });
-    }
+    // for (const auto& path : result.paths) {
+    //   net_log.AddEvent(NetLogEventType::CERT_VERIFY_PROC_PATH_BUILT,
+    //                    [&] { return NetLogPathBuilderResultPath(*path); });
+    // }
 
-    net_log.EndEvent(NetLogEventType::CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT,
-                     [&] { return NetLogPathBuilderResult(result); });
+    // net_log.EndEvent(NetLogEventType::CERT_VERIFY_PROC_PATH_BUILD_ATTEMPT,
+    //                  [&] { return NetLogPathBuilderResult(result); });
 
     if (result.HasValidPath())
       break;
@@ -832,10 +838,10 @@ int CertVerifyProcBuiltin::VerifyInternal(
   int error = AssignVerifyResult(
       input_cert, hostname, result, verification_type,
       checked_revocation_for_some_path, ssl_trust_store.get(), verify_result);
-  if (error == OK) {
-    LogNameNormalizationMetrics(".Builtin", verify_result->verified_cert.get(),
-                                verify_result->is_issued_by_known_root);
-  }
+  // if (error == OK) {
+  //   LogNameNormalizationMetrics(".Builtin", verify_result->verified_cert.get(),
+  //                               verify_result->is_issued_by_known_root);
+  // }
   return error;
 }
 
diff --git a/net/tools/cert_bench/cert_bench.cc b/net/tools/cert_bench/cert_bench.cc
new file mode 100644
index 0000000000..87743f006e
--- /dev/null
+++ b/net/tools/cert_bench/cert_bench.cc
@@ -0,0 +1,308 @@
+#include <iostream>
+
+#include "base/base64.h"
+#include "base/at_exit.h"
+#include "base/bind.h"
+#include "base/callback_helpers.h"
+#include "base/command_line.h"
+#include "base/logging.h"
+#include "base/files/file_util.h"
+#include "base/message_loop/message_pump_type.h"
+#include "base/strings/string_split.h"
+#include "base/synchronization/waitable_event.h"
+#include "base/task/thread_pool/thread_pool_instance.h"
+#include "base/threading/thread.h"
+#include "base/time/time.h"
+#include "build/build_config.h"
+#include "net/cert/x509_util.h"
+#include "net/cert/cert_net_fetcher.h"
+#include "net/cert/cert_verify_proc.h"
+#include "net/cert/cert_verify_proc_builtin.h"
+#include "net/cert/crl_set.h"
+#include "net/cert/internal/cert_errors.h"
+#include "net/cert/pem.h"
+#include "net/cert/internal/system_trust_store.h"
+#include "net/cert_net/cert_net_fetcher_url_request.h"
+#include "net/tools/cert_verify_tool/cert_verify_tool_util.h"
+#include "net/tools/cert_verify_tool/verify_using_cert_verify_proc.h"
+#include "net/tools/cert_verify_tool/verify_using_path_builder.h"
+#include "net/url_request/url_request_context.h"
+#include "net/url_request/url_request_context_builder.h"
+#include "net/url_request/url_request_context_getter.h"
+
+using namespace net;
+
+class OneTimeSystemTrustStoreProvider : public SystemTrustStoreProvider {
+    public:
+        std::unique_ptr<SystemTrustStore> trust_store;
+
+        OneTimeSystemTrustStoreProvider(std::unique_ptr<SystemTrustStore> _trust_store) {
+            this->trust_store = std::move(_trust_store);
+        }
+
+        std::unique_ptr<SystemTrustStore> CreateSystemTrustStore() override {
+            return std::move(this->trust_store);
+        }
+};
+
+// The PEM block header used for PEM-encoded DER certificates.
+const char kCertificateHeader[] = "CERTIFICATE";
+
+// Parses |data_string| as a single DER cert or a PEM certificate list.
+// This is an alternative to X509Certificate::CreateFrom[...] which
+// is designed to decouple the file input and decoding from the DER Certificate
+// parsing.
+void ExtractCertificatesFromData(const std::string& data_string,
+                                 const base::FilePath& file_path,
+                                 std::vector<CertInput>* certs) {
+    // TODO(mattm): support PKCS #7 (.p7b) files.
+    PEMTokenizer pem_tokenizer(data_string, {kCertificateHeader});
+    int block = 0;
+    while (pem_tokenizer.GetNext()) {
+        CertInput cert;
+        cert.der_cert = pem_tokenizer.data();
+        cert.source_file_path = file_path;
+        cert.source_details =
+            base::StringPrintf("%s block %i", kCertificateHeader, block);
+        certs->push_back(cert);
+        ++block;
+    }
+
+    // If it was a PEM file, return the extracted results.
+    if (block)
+        return;
+
+    // Otherwise, assume it is a single DER cert.
+    CertInput cert;
+    cert.der_cert = data_string;
+    cert.source_file_path = file_path;
+    certs->push_back(cert);
+}
+
+void PrintCertError(const std::string& error, const CertInput& cert) {
+    std::cerr << error << " " << cert.source_file_path.value();
+    if (!cert.source_details.empty())
+        std::cerr << " (" << cert.source_details << ")";
+    std::cerr << "\n";
+}
+
+bssl::UniquePtr<CRYPTO_BUFFER> DecodeCertBase64(std::string& base64) {
+    std::string decoded;
+
+    if (!base::Base64Decode(base64, &decoded)) {
+        return nullptr;
+    }
+
+    return X509Certificate::CreateCertBufferFromBytes(decoded.c_str(), decoded.size());
+}
+
+scoped_refptr<ParsedCertificate> ParseCertificateFromBuffer(
+    CRYPTO_BUFFER* cert_handle,
+    CertErrors* errors) {
+    return ParsedCertificate::Create(bssl::UpRef(cert_handle),
+                                    x509_util::DefaultParseCertificateOptions(),
+                                    errors);
+}
+
+int main(int argc, char** argv) {
+    if (!base::CommandLine::Init(argc, argv)) {
+        std::cerr << "failed to parse args\n";
+        return 1;
+    }
+
+    // logging::LoggingSettings settings;
+    // settings.logging_dest = logging::LOG_NONE;
+    // logging::InitLogging(settings);
+
+    base::CommandLine& command_line = *base::CommandLine::ForCurrentProcess();
+
+    base::CommandLine::StringVector args = command_line.GetArgs();
+    if (args.size() != 1U || command_line.HasSwitch("help")) {
+        std::cout << "usage: " << argv[0] << " <roots in PEM format> [--bench=<n>]\n";
+        return 1;
+    }
+
+    // Read benchmarking args
+    size_t bench_repeat = 1;
+    if (command_line.HasSwitch("bench")) {
+        int parsed = std::atoi(command_line.GetSwitchValueASCII("bench").c_str());
+
+        if (parsed <= 0) {
+            std::cout << "error: invalid option --bench=<n>\n";
+            return 1;
+        }
+
+        bench_repeat = parsed;
+    }
+
+    base::FilePath roots_path = base::FilePath(args[0]);
+
+    // Read roots from roots_path
+    std::vector<CertInput> root_der_certs;
+    std::string file_data;
+    if (!base::ReadFileToString(roots_path, &file_data)) {
+        std::cout << "error: failed to read roots " << roots_path.value() << ": " << strerror(errno) << "\n";
+        return 1;
+    }
+    ExtractCertificatesFromData(file_data, roots_path, &root_der_certs);
+
+    std::vector<scoped_refptr<ParsedCertificate>> parsed_roots;
+    for (const auto& cert : root_der_certs) {
+        scoped_refptr<X509Certificate> tmp =
+            X509Certificate::CreateFromBytes(cert.der_cert.data(), cert.der_cert.size());
+
+        if (!tmp) {
+            std::cout << "error: failed to parse root\n";
+            return 1;
+        }
+
+        CertErrors parsing_errors;
+        scoped_refptr<ParsedCertificate> parsed_root =
+            ParseCertificateFromBuffer(tmp->cert_buffer(), &parsing_errors);
+
+        if (!parsed_root) {
+            std::cout << "error: failed to parse root\n";
+            return 1;
+        }
+
+        parsed_roots.push_back(parsed_root);
+    }
+
+    std::string line;
+
+    // Leaf and intermediates in base64
+    std::string leaf;
+    std::vector<std::string> interm;
+
+    scoped_refptr<CRLSet> crl_set = CRLSet::BuiltinCRLSet();
+
+    int flags = 0; // CertVerifyProc::VERIFY_REV_CHECKING_ENABLED
+
+    // scoped_refptr<CertVerifyProc> proc = CreateCertVerifyProcBuiltin(
+    //     nullptr, // no network
+    //     // std::make_unique<OneTimeSystemTrustStoreProvider>(std::move(trust_store))
+    //     SystemTrustStoreProvider::CreateDefaultForSSL(),
+    // );
+
+    while (std::getline(std::cin, line)) {
+        // Three types of input lines:
+        // 1. "leaf: <base64>": set leaf cert
+        // 2. "interm: <base64>": add an intermediate cert
+        // 3. "domain: <domain>": validate the domain based on previous certs
+        // 4. "repeat: <n>": set repeat to n
+        //
+        // The input is expected to be in the format of (12*3)*
+
+        std::string leaf_prefix = "leaf: ";
+        std::string interm_prefix = "interm: ";
+        std::string domain_prefix = "domain: ";
+        std::string repeat_prefix = "repeat: ";
+
+        std::string decoded;
+
+        if (line.empty()) {
+            continue;
+        } else if (line.find(leaf_prefix, 0) == 0) {
+            if (!leaf.empty()) {
+                std::cout << "error: duplicate leaves" << std::endl;
+                return 1;
+            }
+
+            leaf = line.substr(leaf_prefix.length());
+        } else if (line.rfind(interm_prefix, 0) == 0) {
+            if (leaf.empty()) {
+                std::cout << "error: interm sent before leaf" << std::endl;
+                return 1;
+            }
+
+            interm.push_back(line.substr(interm_prefix.length()));
+        } else if (line.rfind(repeat_prefix, 0) == 0) {
+            int new_repeat = std::atoi(line.substr(repeat_prefix.length()).c_str());
+
+            if (new_repeat <= 0) {
+                std::cout << "error: invalid repeat" << std::endl;
+                return 1;
+            }
+
+            bench_repeat = new_repeat;
+        } else if (line.rfind(domain_prefix, 0) == 0) {
+            if (leaf.empty()) {
+                std::cout << "error: domain sent before leaf" << std::endl;
+                return 1;
+            }
+
+            std::string domain = line.substr(domain_prefix.length());
+            std::vector<int64_t> durations;
+            durations.reserve(bench_repeat);
+
+            int error;
+
+            for (size_t i = 0; i < bench_repeat; i++) {
+                std::unique_ptr<SystemTrustStore> trust_store = CreateEmptySystemTrustStore();
+                for (const auto& parsed_root : parsed_roots) {
+                    trust_store->AddTrustAnchor(parsed_root);
+                }
+
+                scoped_refptr<CertVerifyProc> proc = CreateCertVerifyProcBuiltin(
+                    nullptr, // no network
+                    std::make_unique<OneTimeSystemTrustStoreProvider>(std::move(trust_store))
+                );
+
+                // Start at Base64 decoding
+                auto start = base::TimeTicks::Now();
+
+                // Parse base64 certificates
+                bssl::UniquePtr<CRYPTO_BUFFER> leaf_buffer = DecodeCertBase64(leaf);
+                std::vector<bssl::UniquePtr<CRYPTO_BUFFER>> interm_buffer;
+
+                if (!leaf_buffer) {
+                    std::cout << "error: failed to base64 decode leaf" << std::endl;
+                    return 1;
+                }
+
+                for (auto cert : interm) {
+                    auto decoded = DecodeCertBase64(cert);
+                    if (!decoded) {
+                        std::cout << "error: failed to base64 decode interm" << std::endl;
+                        return 1;
+                    }
+
+                    interm_buffer.push_back(std::move(decoded));
+                }
+
+                scoped_refptr<X509Certificate> cert = X509Certificate::CreateFromBuffer(std::move(leaf_buffer), std::move(interm_buffer));
+                if (!cert) {
+                    std::cout << "error: failed to parse cert" << std::endl;
+                    return 1;
+                }
+
+                // Verify certificate with intermediates
+                CertVerifyResult result;
+                error = proc.get()->Verify(
+                    cert.get(), domain,
+                    /*ocsp_response=*/ std::string(), /*sct_list=*/ std::string(),
+                    flags,
+                    crl_set.get(),
+                    CertificateList(),
+                    &result,
+                    NetLogWithSource()
+                );
+
+                // End after verification
+                durations.push_back((base::TimeTicks::Now() - start).InMicroseconds());
+            }
+
+            std::cout << "result: " << ErrorToShortString(error);
+            for (size_t i = 0; i < bench_repeat; i++) {
+                std::cout << " " << durations[i];
+            }
+            std::cout << std::endl;
+
+            leaf.clear();
+            interm.clear();
+        } else {
+            std::cout << "error: invalid line" << std::endl;
+            return 1;
+        }
+    }
+}
